import React, { useState, useCallback } from 'react';
import styles from '../../assets/styles/signup/PlaceSearch.module.css';
import FormInput from '../common/FormInput';
import FormButton from '../common/FormButton';

const PlaceSearch = ({ onPlaceSelect, error, onErrorClear }) => {
    const [searchKeyword, setSearchKeyword] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [selectedPlace, setSelectedPlace] = useState(null);

    // Í≤ÄÏÉâÌïú Ï£ºÏÜå ÌååÏã± Î°úÏßÅ
    const parseRegionInfo = useCallback((address) => {
        const addressParts = address.split(' ');
        
        if (addressParts.length < 2) {
            return { regionSido: '', regionSigungu: '' };
        }

        const firstPart = addressParts[0];
        const specialCities = ['ÏÑúÏö∏', 'Ïù∏Ï≤ú', 'ÎåÄÏ†Ñ', 'ÎåÄÍµ¨', 'Ïö∏ÏÇ∞', 'Î∂ÄÏÇ∞', 'Í¥ëÏ£º', 'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú'];
        
        let regionSido = '';
        let regionSigungu = '';

        // ÌäπÎ≥ÑÏãú/Í¥ëÏó≠Ïãú Ï≤òÎ¶¨
        if (specialCities.some(city => firstPart.includes(city))) {
            if (firstPart === 'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú') {
                regionSido = 'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú';
            } else {
                regionSido = firstPart + 'Ïãú';
            }
            regionSigungu = addressParts[1] || '';
        } else {
            // ÏùºÎ∞ò Ïãú/ÎèÑ Ï≤òÎ¶¨
            regionSido = addressParts[1] || '';
            regionSigungu = addressParts[2] || '';
        }

        return { regionSido, regionSigungu };
    }, []);


    // Ïπ¥Ïπ¥Ïò§Îßµ Ïû•ÏÜå Í≤ÄÏÉâ
    const handlePlaceSearch = useCallback(async () => {
        if (!searchKeyword.trim()) {
            return;
        }

        if (!window.kakao || !window.kakao.maps) {
            alert('Ïπ¥Ïπ¥Ïò§Îßµ APIÎ•º Î°úÎìúÌïòÎäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        setIsSearching(true);
        const places = new window.kakao.maps.services.Places();

        places.keywordSearch(searchKeyword + ' ÏãùÎãπ', (data, status) => {
            setIsSearching(false);
            
            if (status === window.kakao.maps.services.Status.OK) {
                // ÏãùÎãπ/Ïπ¥Ìéò Í¥ÄÎ†® Í≤∞Í≥ºÎßå ÌïÑÌÑ∞ÎßÅ
                const filteredResults = data.filter(place => 
                    place.category_name.includes('ÏùåÏãùÏ†ê') || 
                    place.category_name.includes('Ïπ¥Ìéò') ||
                    place.category_name.includes('ÏãùÎãπ')
                ).slice(0, 30); // Í∞ÄÏ†∏Ïò¨ Í≤∞Í≥º Ïàò Ï†úÌïú

                setSearchResults(filteredResults);
                
                if (filteredResults.length === 0) {
                    alert('Í≤ÄÏÉâÎêú ÏãùÎãπÏù¥ ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî.');
                }
            } else {
                alert('Í≤ÄÏÉâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                setSearchResults([]);
            }
        });
    }, [searchKeyword]);

    // Ïû•ÏÜå ÏÑ†ÌÉù
    const handlePlaceClick = useCallback((place) => {
        setSelectedPlace(place);
        
        const fullAddress = place.road_address_name || place.address_name;
        const { regionSido, regionSigungu } = parseRegionInfo(fullAddress);

        const placeData = {
            restaurantName: place.place_name,
            address: fullAddress,
            regionSido,
            regionSigungu,
            latitude: place.y,
            longitude: place.x
        };

        onPlaceSelect(placeData);
        setSearchResults([]);
        setSearchKeyword('');
        
        if (onErrorClear) {
            onErrorClear('address');
        }
    }, [onPlaceSelect, onErrorClear, parseRegionInfo]);

    const handleKeyPress = useCallback((e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            e.stopPropagation();
            handlePlaceSearch();
        }
    }, [handlePlaceSearch]);

    return (
        <div className={styles.container}>
            <div className={styles.searchGroup}>
                <FormInput
                    name="placeSearch"
                    type="text"
                    placeholder="ÏãùÎãπÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏó¨ Í≤ÄÏÉâÌïòÏÑ∏Ïöî"
                    value={searchKeyword}
                    onChange={(e) => setSearchKeyword(e.target.value)}
                    onKeyPress={handleKeyPress}
                    error={error}
                />
                <FormButton
                    type="button"
                    variant="secondary"
                    size="small"
                    onClick={handlePlaceSearch}
                    loading={isSearching}
                    disabled={!searchKeyword.trim()}
                    className={styles.searchButton}
                >
                    Í≤ÄÏÉâ
                </FormButton>
            </div>

            {searchResults.length > 0 && (
                <div className={styles.resultsContainer}>
                    <h4 className={styles.resultsTitle}>Í≤ÄÏÉâ Í≤∞Í≥º</h4>
                    <ul className={styles.resultsList}>
                        {searchResults.map((place, index) => (
                            <li 
                                key={place.id} 
                                className={styles.resultItem}
                                onClick={() => handlePlaceClick(place)}
                            >
                                <div className={styles.placeName}>
                                    {place.place_name}
                                </div>
                                <div className={styles.placeAddress}>
                                    {place.road_address_name || place.address_name}
                                </div>
                                <div className={styles.placeCategory}>
                                    {place.category_name}
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
            )}

            {selectedPlace && (
                <div className={styles.selectedPlace}>
                    üìç[{selectedPlace.place_name}] {selectedPlace.road_address_name || selectedPlace.address_name} 
                     (ÏúÑÎèÑ: {parseFloat(selectedPlace.y).toFixed(6)}, Í≤ΩÎèÑ: {parseFloat(selectedPlace.x).toFixed(6)})
                </div>
            )}
        </div>
    );
};

export default PlaceSearch;